import { useState, useRef } from "react";
import { saveAs } from "file-saver";
import html2canvas from "html2canvas";
import {
  ComposedChart,
  Bar,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from "recharts";

export default function App() {
  const [rolls, setRolls] = useState(1000);
  const [diceCount, setDiceCount] = useState(3);
  const [frequency, setFrequency] = useState<{ sum: number; count: number; value?: number }[]>([]);
  const [allRolls, setAllRolls] = useState<number[][]>([]);
  const [showNormal, setShowNormal] = useState(true);
  const chartRef = useRef(null);
  const [showInfo, setShowInfo] = useState(false);

  const rollDice = () => {
    const freqMap: Record<number, number> = {};
    const fullHistory: number[][] = [];

    for (let i = 0; i < rolls; i++) {
      const rollCombo: number[] = [];
      let rollSum = 0;
      for (let j = 0; j < diceCount; j++) {
        const r = Math.floor(Math.random() * 6 + 1);
        rollSum += r;
        rollCombo.push(r);
      }
      fullHistory.push(rollCombo);
      freqMap[rollSum] = (freqMap[rollSum] || 0) + 1;
    }

    const freqArray = Object.entries(freqMap)
      .map(([sum, count]) => ({ sum: Number(sum), count }))
      .sort((a, b) => a.sum - b.sum);

    const mean = diceCount * 3.5;
    const stdDev = Math.sqrt(diceCount * ((6 ** 2 - 1) / 12));
    const freqWithNormal = freqArray.map(({ sum, count }) => {
      const exponent = -((sum - mean) ** 2) / (2 * stdDev ** 2);
      const value = (1 / (stdDev * Math.sqrt(2 * Math.PI))) * Math.exp(exponent) * rolls;
      return { sum, count, value };
    });

    setAllRolls(fullHistory);
    setFrequency(freqWithNormal);
  };

  const downloadChart = async () => {
    if (chartRef.current) {
      const canvas = await html2canvas(chartRef.current);
      canvas.toBlob((blob) => {
        if (blob) saveAs(blob, "chart.png");
      });
    }
  };

  return (
    <div style={{ padding: "2rem", fontFamily: "Arial, sans-serif", backgroundColor: "#e0f2fe", minHeight: "100vh", color: "#333" }}>
      <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
        <h1 style={{ fontSize: "32px", fontWeight: "bold", color: "#1d4ed8" }}>üé≤ –°–∏–º—É–ª—è—Ç–æ—Ä –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤</h1>
        <button onClick={() => setShowInfo(!showInfo)} style={{ background: "#111", color: "white", border: "none", fontSize: "20px", cursor: "pointer", padding: "0.3rem 0.8rem", borderRadius: "6px" }}>
          ‚ìò
        </button>
      </div>

      {showInfo && (
        <div style={{ backgroundColor: "#fff", padding: "1rem", marginTop: "1rem", border: "1px solid #ccc", borderRadius: "8px" }}>
          <h3>‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏</h3>
          <p>
            –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ‚Äî –æ–¥–Ω–æ –∏–∑ —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. –ï–≥–æ —Ñ–æ—Ä–º–∞ ‚Äî –∫–æ–ª–æ–∫–æ–ª–æ–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è, –∫–æ—Ç–æ—Ä–∞—è –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã, –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ –æ–∫–æ–ª–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å—ë –º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–º –ø–æ –º–µ—Ä–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–µ–≥–æ.
          </p>
          <p>–û–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (—Ñ–æ—Ä–º—É–ª–∞ –ì–∞—É—Å—Å–∞):</p>
          <pre style={{ backgroundColor: "#f3f4f6", padding: "1rem", borderRadius: "6px" }}>
œÅ(t) = (1 / (œÉ‚àö2œÄ)) * exp( - (t - ‚ü®t‚ü©)¬≤ / (2œÉ¬≤) )
          </pre>
          <p>
            –ì–¥–µ:
            <br />‚ü®t‚ü© ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ),
            <br />œÉ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ,
            <br />t ‚Äî –∏–∑–º–µ—Ä—è–µ–º–∞—è –≤–µ–ª–∏—á–∏–Ω–∞.
          </p>
          <p>
            –í –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏. –í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏. –ü—Ä–∏ –±–æ–ª—å—à–æ–º —á–∏—Å–ª–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –ø–æ —Ñ–æ—Ä–º–µ.
          </p>
          <p>
            –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ø–∞—Å—Ç—å –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª:
            <br />[‚ü®t‚ü© - œÉ, ‚ü®t‚ü© + œÉ] ‚âà 68.3%
            <br />[‚ü®t‚ü© - 2œÉ, ‚ü®t‚ü© + 2œÉ] ‚âà 95.4%
            <br />[‚ü®t‚ü© - 3œÉ, ‚ü®t‚ü© + 3œÉ] ‚âà 99.7%
          </p>
        </div>
      )}

      <div style={{ marginTop: "1rem", display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(240px, 1fr))", gap: "1rem", alignItems: "end" }}>
        <label style={{ color: "#111", fontWeight: 500, backgroundColor: "#e5e7eb", padding: "0.5rem", borderRadius: "6px" }}>
          –ö–æ–ª-–≤–æ –±—Ä–æ—Å–∫–æ–≤:
          <input
            type="number"
            min={1}
            value={rolls}
            onChange={(e) => setRolls(Number(e.target.value))}
            style={{ width: "100%", marginTop: "0.25rem", padding: "0.5rem", fontSize: "16px", borderRadius: "4px", border: "1px solid #ccc", backgroundColor: "#f9fafb", color: "#1e3a8a" }}
          />
        </label>
        <label style={{ color: "#111", fontWeight: 500, backgroundColor: "#e5e7eb", padding: "0.5rem", borderRadius: "6px" }}>
          –ö–æ–ª-–≤–æ –∫—É–±–∏–∫–æ–≤:
          <input
            type="number"
            min={1}
            value={diceCount}
            onChange={(e) => setDiceCount(Number(e.target.value))}
            style={{ width: "100%", marginTop: "0.25rem", padding: "0.5rem", fontSize: "16px", borderRadius: "4px", border: "1px solid #ccc", backgroundColor: "#f9fafb", color: "#065f46" }}
          />
        </label>
        <label style={{ display: "flex", alignItems: "center", fontWeight: 500, color: "#111" }}>
          <input type="checkbox" checked={showNormal} onChange={() => setShowNormal(!showNormal)} style={{ marginRight: "0.5rem" }} />
          –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∫—Ä–∏–≤—É—é
        </label>
        <button
          onClick={rollDice}
          style={{ padding: "0.5rem 1rem", backgroundColor: "#2563eb", color: "white", border: "none", borderRadius: "5px" }}
        >
          –ë—Ä–æ—Å–∏—Ç—å!
        </button>
      </div>

      {allRolls.length > 0 && (
        <div style={{ marginTop: "2rem" }}>
          <h2 style={{ fontSize: "20px", fontWeight: "bold" }}>üìö –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –±—Ä–æ—Å–∫–æ–≤:</h2>
          <div style={{ maxHeight: "300px", overflowY: "auto", backgroundColor: "#fff", padding: "1rem", border: "1px solid #e5e7eb", borderRadius: "8px" }}>
            <table style={{ width: "100%", borderCollapse: "collapse", tableLayout: "fixed" }}>
              <thead>
                <tr>
                  <th style={{ borderBottom: "1px solid #ccc", padding: "4px" }}>–ù–æ–º–µ—Ä –±—Ä–æ—Å–∫–∞</th>
                  <th style={{ borderBottom: "1px solid #ccc", padding: "4px" }}>–°—É–º–º–∞</th>
                  <th style={{ borderBottom: "1px solid #ccc", padding: "4px" }}>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {allRolls.map((combo, idx) => (
                  <tr key={idx}>
                    <td style={{ padding: "4px" }}>{idx + 1}</td>
                    <td style={{ padding: "4px" }}>{combo.reduce((a, b) => a + b, 0)}</td>
                    <td style={{ padding: "4px" }}>[{combo.join(", ")}]</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {frequency.length > 0 && (
        <div style={{ marginTop: "2rem" }}>
          <h2 style={{ fontSize: "20px", fontWeight: "bold", color: "black" }}>üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</h2>
          <div ref={chartRef} style={{ marginTop: "1rem", background: "white", padding: "1rem", borderRadius: "8px", boxShadow: "0 0 10px rgba(0,0,0,0.1)" }}>
            <ResponsiveContainer width="100%" height={300}>
              <ComposedChart data={frequency}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="sum" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="count" fill="#10b981" />
                {showNormal && <Line type="monotone" dataKey="value" stroke="#ef4444" dot={false} />}
              </ComposedChart>
            </ResponsiveContainer>
          </div>
          <button
            onClick={downloadChart}
            style={{ marginTop: "1rem", padding: "0.5rem 1rem", backgroundColor: "#059669", color: "white", border: "none", borderRadius: "5px" }}
          >
            –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ PNG
          </button>
          <p style={{ marginTop: "1rem", fontStyle: "italic", color: "#374151" }}>
            –ß–µ–º –±–æ–ª—å—à–µ –∫—É–±–∏–∫–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ (–∫–æ–ª–æ–∫–æ–ª–æ–æ–±—Ä–∞–∑–Ω–æ–µ). –ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è ‚Äî —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è –ì–∞—É—Å—Å–∞ üìà
          </p>
        </div>
      )}
    </div>
  );
}