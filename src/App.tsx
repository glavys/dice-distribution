import { useState, useRef } from "react";
import { saveAs } from "file-saver";
import html2canvas from "html2canvas";
import {
  ComposedChart,
  Bar,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from "recharts";

export default function App() {
  const [rolls, setRolls] = useState(1000);
  const [diceCount, setDiceCount] = useState(3);
  const [frequency, setFrequency] = useState<{ sum: number; count: number; value?: number }[]>([]);
  const [allRolls, setAllRolls] = useState<number[][]>([]);
  const [showNormal, setShowNormal] = useState(true);
  const chartRef = useRef(null);
  const [showInfo, setShowInfo] = useState(false);

  const rollDice = () => {
  if (diceCount < 2) {
    alert("–ù–µ–ª—å–∑—è –±—Ä–æ—Å–∏—Ç—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö –∫—É–±–∏–∫–æ–≤!");
    return;
  }
    const freqMap: Record<number, number> = {};
    const fullHistory: number[][] = [];

    for (let i = 0; i < rolls; i++) {
      const rollCombo: number[] = [];
      let rollSum = 0;
      for (let j = 0; j < diceCount; j++) {
        const r = Math.floor(Math.random() * 6 + 1);
        rollSum += r;
        rollCombo.push(r);
      }
      fullHistory.push(rollCombo);
      freqMap[rollSum] = (freqMap[rollSum] || 0) + 1;
    }

    const freqArray = Object.entries(freqMap)
      .map(([sum, count]) => ({ sum: Number(sum), count }))
      .sort((a, b) => a.sum - b.sum);

    const mean = diceCount * 3.5;
    const stdDev = Math.sqrt(diceCount * ((6 ** 2 - 1) / 12));
    const freqWithNormal = freqArray.map(({ sum, count }) => {
      const exponent = -((sum - mean) ** 2) / (2 * stdDev ** 2);
      const value = (1 / (stdDev * Math.sqrt(2 * Math.PI))) * Math.exp(exponent) * rolls;
      return { sum, count, value };
    });

    setAllRolls(fullHistory);
    setFrequency(freqWithNormal);
  };

  const downloadChart = async () => {
    if (chartRef.current) {
      const canvas = await html2canvas(chartRef.current);
      canvas.toBlob((blob) => {
        if (blob) saveAs(blob, "chart.png");
      });
    }
  };

  const downloadCSV = () => {
  if (allRolls.length === 0) return;

  const header = "–ù–æ–º–µ—Ä –±—Ä–æ—Å–∫–∞,–°—É–º–º–∞,–ö–æ–º–±–∏–Ω–∞—Ü–∏—è\n";
  const rows = allRolls.map((combo, idx) => {
    const sum = combo.reduce((a, b) => a + b, 0);
    return `${idx + 1},${sum},"[${combo.join(", ")}]"`;
  });

  const csvContent = "Ôªø" + header + rows.join("\n");
  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  saveAs(blob, "—Ç–∞–±–ª–∏—Ü–∞_–±—Ä–æ—Å–∫–æ–≤.csv");
};

  return (
    <div style={{ display: "flex", flexDirection: "column", alignItems: "center", padding: "2rem", fontFamily: "Arial, sans-serif", backgroundColor: "#e0f2fe", minHeight: "100vh", width: "100vw", color: "#333" }}>
      <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
        <h1 style={{ fontSize: "32px", fontWeight: "bold", color: "#1d4ed8" }}>üé≤ –°–∏–º—É–ª—è—Ç–æ—Ä –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤</h1>
        <button onClick={() => setShowInfo(!showInfo)} style={{ background: "#111", color: "white", border: "none", fontSize: "20px", cursor: "pointer", padding: "0.3rem 0.8rem", borderRadius: "6px" }}>
          ‚ìò
        </button>
      </div>

      {showInfo && (
        <div style={{ backgroundColor: "#fff", padding: "1rem", marginTop: "1rem", border: "1px solid #ccc", borderRadius: "8px" }}>
          <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏</h3>
<p><strong>–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</strong> ‚Äî —ç—Ç–æ –æ–¥–Ω–æ –∏–∑ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ. –û–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç, –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –≤–æ–∫—Ä—É–≥ –µ—ë —Å—Ä–µ–¥–Ω–µ–≥–æ. –í–∏–∑—É–∞–ª—å–Ω–æ –æ–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –≤–∏–¥–µ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–π –∫–æ–ª–æ–∫–æ–ª–æ–æ–±—Ä–∞–∑–Ω–æ–π –∫—Ä–∏–≤–æ–π, –Ω–∞–∑—ã–≤–∞–µ–º–æ–π <strong>–∫—Ä–∏–≤–æ–π –ì–∞—É—Å—Å–∞</strong>.</p>
<p><strong>–§–æ—Ä–º—É–ª–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:</strong></p>
<pre>
œÅ(t) = (1 / (œÉ‚àö2œÄ)) ¬∑ exp( - (t - ‚ü®t‚ü©)¬≤ / (2œÉ¬≤) )
</pre>
<p>
  –≥–¥–µ:<br />
  ‚ü®t‚ü© ‚Äî –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ (—Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ),<br />
  œÉ ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ,<br />
  t ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ—Ä—è–µ–º–æ–π –≤–µ–ª–∏—á–∏–Ω—ã.
</p>
<p><strong>–ü–æ—á–µ–º—É –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—É–±–∏–∫–∏?</strong><br />
  –≠—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–≥–ª—è–¥–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ <strong>—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –ø—Ä–µ–¥–µ–ª—å–Ω–æ–π —Ç–µ–æ—Ä–µ–º—ã</strong>, –∫–æ—Ç–æ—Ä–∞—è —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–µ–ª–∏—á–∏–Ω —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é.
</p>
<p>
  ‚Äî –û–¥–∏–Ω –∫—É–±–∏–∫: —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 6<br />
  ‚Äî –ù–µ—Å–∫–æ–ª—å–∫–æ –∫—É–±–∏–∫–æ–≤: —Å—É–º–º–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö –≤–µ–ª–∏—á–∏–Ω<br />
  ‚Äî –ú–Ω–æ–≥–æ –±—Ä–æ—Å–∫–æ–≤: –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
</p>
<p><strong>–ù–∞ –≥—Ä–∞—Ñ–∏–∫–µ:</strong></p>
<ul>
  <li><strong>–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞</strong> ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—É–º–º</li>
  <li><strong>–ö—Ä–∞—Å–Ω–∞—è –∫—Ä–∏–≤–∞—è</strong> ‚Äî —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ</li>
</ul>
        </div>
      )}

      <div style={{ marginTop: "1rem", display: "grid", gridTemplateColumns: "repeat(auto-fit, minmax(240px, 1fr))", gap: "1rem", alignItems: "end" }}>
        <label style={{ color: "#111", fontWeight: 500, backgroundColor: "#e5e7eb", padding: "0.5rem", borderRadius: "6px" }}>
          –ö–æ–ª-–≤–æ –±—Ä–æ—Å–∫–æ–≤:
          <input
            type="number"
            min={2}
            value={rolls}
            onChange={(e) => setRolls(Number(e.target.value))}
            style={{ width: "100%", marginTop: "0.25rem", padding: "0.5rem", fontSize: "16px", borderRadius: "4px", border: "1px solid #ccc", backgroundColor: "#f9fafb", color: "#1e3a8a" }}
          />
        </label>
        <label style={{ color: "#111", fontWeight: 500, backgroundColor: "#e5e7eb", padding: "0.5rem", borderRadius: "6px" }}>
          –ö–æ–ª-–≤–æ –∫—É–±–∏–∫–æ–≤:
          <input
            type="number"
            min={2}
            value={diceCount}
            onChange={(e) => setDiceCount(Number(e.target.value))}
            style={{ width: "100%", marginTop: "0.25rem", padding: "0.5rem", fontSize: "16px", borderRadius: "4px", border: "1px solid #ccc", backgroundColor: "#f9fafb", color: "#065f46" }}
          />
        </label>
        <label style={{ display: "flex", alignItems: "center", fontWeight: 500, color: "#111" }}>
          <input type="checkbox" checked={showNormal} onChange={() => setShowNormal(!showNormal)} style={{ marginRight: "0.5rem" }} />
          –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∫—Ä–∏–≤—É—é
        </label>
        <button
          onClick={rollDice}
          style={{ padding: "0.5rem 1rem", backgroundColor: "#2563eb", color: "white", border: "none", borderRadius: "5px" }}
        >
          –ë—Ä–æ—Å–∏—Ç—å!
        </button>
      </div>

      {allRolls.length > 0 && (
        <div style={{ marginTop: "2rem" }}>
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
  <h2 style={{ fontSize: "20px", fontWeight: "bold" }}>üìö –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –±—Ä–æ—Å–∫–æ–≤:</h2>
  
</div>
          <div style={{ maxHeight: "300px", overflowY: "auto", backgroundColor: "#fff", padding: "1rem", border: "1px solid #e5e7eb", borderRadius: "8px", minWidth: "600px" }}>
            <table style={{ width: "100%", borderCollapse: "collapse", tableLayout: "fixed" }}>
              <thead>
                <tr>
                  <th style={{ borderBottom: "1px solid #ccc", padding: "4px" }}>–ù–æ–º–µ—Ä –±—Ä–æ—Å–∫–∞</th>
                  <th style={{ borderBottom: "1px solid #ccc", padding: "4px" }}>–°—É–º–º–∞</th>
                  <th style={{ borderBottom: "1px solid #ccc", padding: "4px" }}>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è</th>
                </tr>
              </thead>
              <tbody>
                {allRolls.map((combo, idx) => (
                  <tr key={idx}>
                    <td style={{ padding: "4px" }}>{idx + 1}</td>
                    <td style={{ padding: "4px" }}>{combo.reduce((a, b) => a + b, 0)}</td>
                    <td style={{ padding: "4px" }}>[{combo.join(", ")}]</td>
                  </tr>
                ))}
              </tbody>
            </table>
            
          </div>
        </div>
      )}

      {frequency.length > 0 && (
        <div style={{ marginTop: "2rem" }}>
          <h2 style={{ fontSize: "20px", fontWeight: "bold", color: "black" }}>üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</h2>
          <div ref={chartRef} style={{ marginTop: "1rem", background: "white", padding: "1rem", borderRadius: "8px", boxShadow: "0 0 10px rgba(0,0,0,0.1)", minWidth: "600px" }}>
            <ResponsiveContainer width="100%" height={300}>
              <ComposedChart data={frequency}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="sum" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="count" fill="#10b981" />
                {showNormal && <Line type="monotone" dataKey="value" stroke="#ef4444" dot={false} />}
              </ComposedChart>
            </ResponsiveContainer>
          </div>
          
          <div style={{ display: 'flex', gap: '1rem', marginTop: '1rem' }}>
  <button
    onClick={downloadChart}
    style={{ padding: '0.5rem 1rem', backgroundColor: '#059669', color: 'white', border: 'none', borderRadius: '5px' }}
  >
    –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ PNG
  </button>
  <button
    onClick={downloadCSV}
    style={{ padding: '0.5rem 1rem', backgroundColor: '#3b82f6', color: 'white', border: 'none', borderRadius: '5px' }}
  >
    –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ CSV
  </button>
</div>
        </div>
      )}
    </div>
  );
}
